---------------------------------------------------------------------------
-- Fns
--
-- Icky functions (for key bindings) and what to do with them.
--
-- @author whilei
-- @author Isaac &lt;isaac.ardis@gmail.com&gt;
-- @copyright 2022 Isaac
-- @coreclassmod icky.fns
---------------------------------------------------------------------------

-- c api libs
local client               = client
local os, string           = os, string

-- awesome libs
local awful                = require("awful")
local naughty              = require("naughty")
local lain                 = require("lain")

-- contrib
local handy                = require("handy")
local hints                = require("hints")
local revelation           = require("revelation")
local special              = require("special")

---------------------------------------------------------------------------
-- HELPERS

local raise_focused_client = function()
	if client.focus then
		client.focus:raise()
	end
end


---------------------------------------------------------------------------

local fns                  = {
	awesome    = {
		show_mainmenu = function()
			awful.util.mymainmenu:show()
		end,
	},
	apps       = {
		handy          = {
			top  = function()
				handy("ffox --class handy-top", awful.placement.top, 0.5, 0.5)
			end,
			left = function()
				handy("ffox --class handy-left", awful.placement.left, 0.25, 0.9)
			end,
		},
		rofi           = function()
			-- Location values:
			-- 1   2   3
			-- 8   0   4
			-- 7   6   5

			local tv_prompt     = "rofi -modi window -show window -sidebar-mode -location 6 -theme Indego -width 20 -no-plugins -no-config -no-lazy-grab -async-pre-read 1 -show-icons"
			local laptop_prompt = "rofi -modi window -show window -sidebar-mode -location 6 -theme Indego -width 40 -no-plugins -no-config -no-lazy-grab -async-pre-read 1 -show-icons"
			commandPrompter     = awful.screen.focused().is_tv and tv_prompt or laptop_prompt
			awful.spawn.easy_async(commandPrompter, function()
				if client.focus then
					awful.screen.focus(client.focus.screen)
				end
			end)
		end,
		quake          = function()
			special.quake:toggle()
		end,
		popup_launcher = special.popup_launcher.launch,
	},
	client     = {
		focus      = {
			back      = special.focus_previous_client_global,
			index     = {
				next = function()
					awful.client.focus.byidx(1)
				end,
				prev = function()
					awful.client.focus.byidx(-1)
				end
			},
			direction = {
				up    = function()
					awful.client.focus.global_bydirection("up")
					raise_focused_client()
				end,
				down  = function()
					awful.client.focus.global_bydirection("down")
					raise_focused_client()
				end,
				left  = function()
					awful.client.focus.global_bydirection("left")
					raise_focused_client()
				end,
				right = function()
					awful.client.focus.global_bydirection("right")
					raise_focused_client()
				end,
			}
		},
		swap       = {
			index = {
				next = function()
					awful.client.swap.byidx(1)
				end,
				prev = function()
					awful.client.swap.byidx(-1)
				end
			},
		},
		restore    = function()
			local c = awful.client.restore()
			if c then
				client.focus = c
				c:raise()
			end
		end,
		hints      = function()
			hints.focus();
			raise_focused_client()
		end,
		revelation = revelation,
	},
	screenshot = {},
	tag        = {
		next    = awful.tag.viewnext,
		prev    = awful.tag.viewprev,
		restore = awful.tag.history.restore,
		move    = {
			left  = function()
				lain.util.move_tag(-1)
			end,
			right = function()
				lain.util.move_tag(1)
			end
		},
		layout  = {
			next                 = function()
				awful.layout.inc(1)
			end,
			previous             = function()
				awful.layout.inc(-1)
			end,
			master_width_factor  = {
				increase = function()
					awful.tag.incmwfact(0.05)
					return true
				end,
				decrease = function()
					awful.tag.incmwfact(-0.05)
					return true
				end,
			},
			master_client_number = {
				increase = function()
					awful.tag.incnmaster(1, nil, true)
					return true
				end,
				decrease = function()
					awful.tag.incnmaster(-1, nil, true)
					return true
				end,
			},
			columns              = {
				increase = function()
					awful.tag.incncol(1, nil, true)
					return true
				end,
				decrease = function()
					awful.tag.incncol(-1, nil, true)
					return true
				end,
			}
		}
	},
	media      = {
		--[[
		Volume can be queried with
		--]]
		--	pactl list sinks | grep '^[[:space:]]Volume:' | \
		--		head -n $(( $SINK + 1 )) | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,'
		-- These functions were generated by Copilot and they
		-- dont seem crazy.
		-- I just installed pavucontrol or whatever, and have tried
		-- a few of these pactl commands in the terminal and they seem
		-- to work ok.
		-- But I dont think they're wired in properly to my theme UI widgets
		-- yet, so I'm going to stick with the amixer commands I originally
		-- have been using.
		-- TODO Maybe swap for pactl commands.
		--volume = {
		--	up   = function()
		--		awful.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")
		--	end,
		--	down = function()
		--		awful.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")
		--	end,
		--	mute = function()
		--		awful.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")
		--	end,
		--},
		--},
		mic_toggle = function()
			os.execute("amixer -q set Capture toggle")
			beautiful.mic.update()
		end,
		volume     = {
			up   = function()
				os.execute(string.format("amixer -q set %s 1%%+", beautiful.volume.channel))
				beautiful.volume.update()
			end,
			down = function()
				os.execute(string.format("amixer -q set %s 1%%-", beautiful.volume.channel))
				beautiful.volume.update()
			end,
			mute = function()
				os.execute(string.format("amixer -q set %s toggle", beautiful.volume.togglechannel or beautiful.volume.channel))
				beautiful.volume.update()
			end,
		},
	},
}

-- {{{ SCREENSHOT
local screenshot_selection = "sleep 0.5 && scrot '%Y-%m-%d-%H%M%S_$wx$h_screenshot.png' --quality 100 --silent --select --freeze --exec 'xclip -selection clipboard -t image/png -i $f;mv $f ~/Pictures/screenshots/'"
local screenshot_window    = "sleep 0.5 && scrot '%Y-%m-%d-%H%M%S_$wx$h_screenshot.png' --quality 100 --silent --focused --exec 'xclip -selection clipboard -t image/png -i $f;mv $f ~/Pictures/screenshots/'"

-- FIXME:The notifier doesnt work quite right when having done multiple screenshots in a row.
local screenshot_notifier  = function(args)
	return function()
		naughty.notify {
			text     = "Screenshot of " .. (args.label or "???") .. " OK",
			timeout  = 2,
			bg       = "#058B04",
			fg       = "#ffffff",
			position = "bottom_middle",
		}
	end
end

fns.screenshot             = {
	selection = function()
		awful.util.mymainmenu:hide()
		awful.spawn.easy_async_with_shell(
				screenshot_selection,
				screenshot_notifier { label = "selection" }
		)
	end,
	window    = function()
		awful.util.mymainmenu:hide()
		awful.spawn.easy_async_with_shell(
				screenshot_window,
				screenshot_notifier { label = "window" }
		)
	end
}
-- }}}

return fns